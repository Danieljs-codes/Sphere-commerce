/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as customerRouteRouteImport } from './routes/(customer)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as customerIndexRouteImport } from './routes/(customer)/index'
import { Route as customerWishlistRouteImport } from './routes/(customer)/wishlist'
import { Route as customerProductsRouteImport } from './routes/(customer)/products'
import { Route as customerOrdersRouteImport } from './routes/(customer)/orders'
import { Route as customerAboutRouteImport } from './routes/(customer)/about'
import { Route as authSignUpRouteImport } from './routes/(auth)/sign-up'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as authResetPasswordRouteImport } from './routes/(auth)/reset-password'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const customerRouteRoute = customerRouteRouteImport.update({
  id: '/(customer)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const customerIndexRoute = customerIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => customerRouteRoute,
} as any)
const customerWishlistRoute = customerWishlistRouteImport.update({
  id: '/wishlist',
  path: '/wishlist',
  getParentRoute: () => customerRouteRoute,
} as any)
const customerProductsRoute = customerProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => customerRouteRoute,
} as any)
const customerOrdersRoute = customerOrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => customerRouteRoute,
} as any)
const customerAboutRoute = customerAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => customerRouteRoute,
} as any)
const authSignUpRoute = authSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => authRouteRoute,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authRouteRoute,
} as any)
const authResetPasswordRoute = authResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => authRouteRoute,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => authRouteRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof customerIndexRoute
  '/admin': typeof AdminRouteRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/reset-password': typeof authResetPasswordRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/about': typeof customerAboutRoute
  '/orders': typeof customerOrdersRoute
  '/products': typeof customerProductsRoute
  '/wishlist': typeof customerWishlistRoute
}
export interface FileRoutesByTo {
  '/': typeof customerIndexRoute
  '/admin': typeof AdminRouteRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/reset-password': typeof authResetPasswordRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/about': typeof customerAboutRoute
  '/orders': typeof customerOrdersRoute
  '/products': typeof customerProductsRoute
  '/wishlist': typeof customerWishlistRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteRouteWithChildren
  '/(customer)': typeof customerRouteRouteWithChildren
  '/admin': typeof AdminRouteRoute
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/reset-password': typeof authResetPasswordRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/(customer)/about': typeof customerAboutRoute
  '/(customer)/orders': typeof customerOrdersRoute
  '/(customer)/products': typeof customerProductsRoute
  '/(customer)/wishlist': typeof customerWishlistRoute
  '/(customer)/': typeof customerIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/about'
    | '/orders'
    | '/products'
    | '/wishlist'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/about'
    | '/orders'
    | '/products'
    | '/wishlist'
  id:
    | '__root__'
    | '/(auth)'
    | '/(customer)'
    | '/admin'
    | '/(auth)/forgot-password'
    | '/(auth)/reset-password'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/(customer)/about'
    | '/(customer)/orders'
    | '/(customer)/products'
    | '/(customer)/wishlist'
    | '/(customer)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  customerRouteRoute: typeof customerRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(customer)': {
      id: '/(customer)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof customerRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(customer)/': {
      id: '/(customer)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof customerIndexRouteImport
      parentRoute: typeof customerRouteRoute
    }
    '/(customer)/wishlist': {
      id: '/(customer)/wishlist'
      path: '/wishlist'
      fullPath: '/wishlist'
      preLoaderRoute: typeof customerWishlistRouteImport
      parentRoute: typeof customerRouteRoute
    }
    '/(customer)/products': {
      id: '/(customer)/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof customerProductsRouteImport
      parentRoute: typeof customerRouteRoute
    }
    '/(customer)/orders': {
      id: '/(customer)/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof customerOrdersRouteImport
      parentRoute: typeof customerRouteRoute
    }
    '/(customer)/about': {
      id: '/(customer)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof customerAboutRouteImport
      parentRoute: typeof customerRouteRoute
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/reset-password': {
      id: '/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authResetPasswordRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof authRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface authRouteRouteChildren {
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authResetPasswordRoute: typeof authResetPasswordRoute
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authForgotPasswordRoute: authForgotPasswordRoute,
  authResetPasswordRoute: authResetPasswordRoute,
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface customerRouteRouteChildren {
  customerAboutRoute: typeof customerAboutRoute
  customerOrdersRoute: typeof customerOrdersRoute
  customerProductsRoute: typeof customerProductsRoute
  customerWishlistRoute: typeof customerWishlistRoute
  customerIndexRoute: typeof customerIndexRoute
}

const customerRouteRouteChildren: customerRouteRouteChildren = {
  customerAboutRoute: customerAboutRoute,
  customerOrdersRoute: customerOrdersRoute,
  customerProductsRoute: customerProductsRoute,
  customerWishlistRoute: customerWishlistRoute,
  customerIndexRoute: customerIndexRoute,
}

const customerRouteRouteWithChildren = customerRouteRoute._addFileChildren(
  customerRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  customerRouteRoute: customerRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
